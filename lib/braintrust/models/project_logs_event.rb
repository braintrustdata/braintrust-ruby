# frozen_string_literal: true

module Braintrust
  module Models
    class ProjectLogsEvent < BaseModel
      # @!attribute [rw] id
      #   A unique identifier for the project logs event. If you don't provide one, BrainTrust will generate one for you
      #   @return [String]
      required :id, String

      # @!attribute [rw] _xact_id
      #   The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the project logs (see the `version` parameter)
      #   @return [String]
      required :_xact_id, String

      # @!attribute [rw] created
      #   The timestamp the project logs event was created
      #   @return [Time]
      required :created, Time

      # @!attribute [rw] log_id
      #   A literal 'g' which identifies the log as a project log
      #   @return [Symbol, Braintrust::Models::ProjectLogsEvent::LogID]
      required :log_id, enum: -> { Braintrust::Models::ProjectLogsEvent::LogID }

      # @!attribute [rw] org_id
      #   Unique id for the organization that the project belongs under
      #   @return [String]
      required :org_id, String

      # @!attribute [rw] project_id
      #   Unique identifier for the project
      #   @return [String]
      required :project_id, String

      # @!attribute [rw] root_span_id
      #   The `span_id` of the root of the trace this project logs event belongs to
      #   @return [String]
      required :root_span_id, String

      # @!attribute [rw] span_id
      #   A unique identifier used to link different project logs events together as part of a full trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full details on tracing
      #   @return [String]
      required :span_id, String

      # @!attribute [rw] context
      #   Context is additional information about the code that produced the project logs event. It is essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to track the location in code which produced the project logs event
      #   @return [Braintrust::Models::ProjectLogsEvent::Context]
      optional :context, -> { Braintrust::Models::ProjectLogsEvent::Context }

      # @!attribute [rw] error
      #   The error that occurred, if any.
      #   @return [Object]
      optional :error, Braintrust::Unknown

      # @!attribute [rw] expected
      #   The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
      #   @return [Object]
      optional :expected, Braintrust::Unknown

      # @!attribute [rw] input
      #   The arguments that uniquely define a user input (an arbitrary, JSON serializable object).
      #   @return [Object]
      optional :input, Braintrust::Unknown

      # @!attribute [rw] metadata
      #   A dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings
      #   @return [Hash]
      optional :metadata, Hash

      # @!attribute [rw] metrics
      #   Metrics are numerical measurements tracking the execution of the code that produced the project logs event. Use "start" and "end" to track the time span over which the project logs event was produced
      #   @return [Braintrust::Models::ProjectLogsEvent::Metrics]
      optional :metrics, -> { Braintrust::Models::ProjectLogsEvent::Metrics }

      # @!attribute [rw] output
      #   The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
      #   @return [Object]
      optional :output, Braintrust::Unknown

      # @!attribute [rw] scores
      #   A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs.
      #   @return [Hash]
      optional :scores, Hash

      # @!attribute [rw] span_attributes
      #   Human-identifying attributes of the span, such as name, type, etc.
      #   @return [Braintrust::Models::ProjectLogsEvent::SpanAttributes]
      optional :span_attributes, -> { Braintrust::Models::ProjectLogsEvent::SpanAttributes }

      # @!attribute [rw] span_parents
      #   An array of the parent `span_ids` of this project logs event. This should be empty for the root span of a trace, and should most often contain just one parent element for subspans
      #   @return [Array<String>]
      optional :span_parents, Braintrust::ArrayOf.new(String)

      # @!attribute [rw] tags
      #   A list of tags to log
      #   @return [Array<String>]
      optional :tags, Braintrust::ArrayOf.new(String)

      # A literal 'g' which identifies the log as a project log
      class LogID < Braintrust::Enum
        G = :g
      end

      class Context < BaseModel
        # @!attribute [rw] caller_filename
        #   Name of the file in code where the project logs event was created
        #   @return [String]
        optional :caller_filename, String

        # @!attribute [rw] caller_functionname
        #   The function in code which created the project logs event
        #   @return [String]
        optional :caller_functionname, String

        # @!attribute [rw] caller_lineno
        #   Line of code where the project logs event was created
        #   @return [Integer]
        optional :caller_lineno, Integer

        # @!parse
        #   # Create a new instance of Context from a Hash of raw data.
        #   #
        #   # @param data [Hash{Symbol => Object}] .
        #   #   @option data [String, nil] :caller_filename Name of the file in code where the project logs event was created
        #   #   @option data [String, nil] :caller_functionname The function in code which created the project logs event
        #   #   @option data [Integer, nil] :caller_lineno Line of code where the project logs event was created
        #   def initialize(data = {}) = super
      end

      class Metrics < BaseModel
        # @!attribute [rw] completion_tokens
        #   The number of tokens in the completion generated by the model (only set if this is an LLM span)
        #   @return [Integer]
        optional :completion_tokens, Integer

        # @!attribute [rw] end_
        #   A unix timestamp recording when the section of code which produced the project logs event finished
        #   @return [Float]
        optional :end_, Float, api_name: :end

        # @!attribute [rw] prompt_tokens
        #   The number of tokens in the prompt used to generate the project logs event (only set if this is an LLM span)
        #   @return [Integer]
        optional :prompt_tokens, Integer

        # @!attribute [rw] start
        #   A unix timestamp recording when the section of code which produced the project logs event started
        #   @return [Float]
        optional :start, Float

        # @!attribute [rw] tokens
        #   The total number of tokens in the input and output of the project logs event.
        #   @return [Integer]
        optional :tokens, Integer

        # @!parse
        #   # Create a new instance of Metrics from a Hash of raw data.
        #   #
        #   # @param data [Hash{Symbol => Object}] .
        #   #   @option data [Integer, nil] :completion_tokens The number of tokens in the completion generated by the model (only set if this
        #   #     is an LLM span)
        #   #   @option data [Float, nil] :end A unix timestamp recording when the section of code which produced the project
        #   #     logs event finished
        #   #   @option data [Integer, nil] :prompt_tokens The number of tokens in the prompt used to generate the project logs event (only
        #   #     set if this is an LLM span)
        #   #   @option data [Float, nil] :start A unix timestamp recording when the section of code which produced the project
        #   #     logs event started
        #   #   @option data [Integer, nil] :tokens The total number of tokens in the input and output of the project logs event.
        #   def initialize(data = {}) = super
      end

      class SpanAttributes < BaseModel
        # @!attribute [rw] name_
        #   Name of the span, for display purposes only
        #   @return [String]
        optional :name_, String, api_name: :name

        # @!attribute [rw] type
        #   Type of the span, for display purposes only
        #   @return [Symbol, Braintrust::Models::ProjectLogsEvent::SpanAttributes::Type]
        optional :type, enum: -> { Braintrust::Models::ProjectLogsEvent::SpanAttributes::Type }

        # Type of the span, for display purposes only
        class Type < Braintrust::Enum
          LLM = :llm
          SCORE = :score
          FUNCTION = :function
          EVAL = :eval
          TASK = :task
          TOOL = :tool
        end

        # @!parse
        #   # Create a new instance of SpanAttributes from a Hash of raw data.
        #   #
        #   # @param data [Hash{Symbol => Object}] .
        #   #   @option data [String, nil] :name Name of the span, for display purposes only
        #   #   @option data [String, nil] :type Type of the span, for display purposes only
        #   def initialize(data = {}) = super
      end

      # @!parse
      #   # Create a new instance of ProjectLogsEvent from a Hash of raw data.
      #   #
      #   # @param data [Hash{Symbol => Object}] .
      #   #   @option data [String] :id A unique identifier for the project logs event. If you don't provide one,
      #   #     BrainTrust will generate one for you
      #   #   @option data [String] :_xact_id The transaction id of an event is unique to the network operation that processed
      #   #     the event insertion. Transaction ids are monotonically increasing over time and
      #   #     can be used to retrieve a versioned snapshot of the project logs (see the
      #   #     `version` parameter)
      #   #   @option data [String] :created The timestamp the project logs event was created
      #   #   @option data [String] :log_id A literal 'g' which identifies the log as a project log
      #   #   @option data [String] :org_id Unique id for the organization that the project belongs under
      #   #   @option data [String] :project_id Unique identifier for the project
      #   #   @option data [String] :root_span_id The `span_id` of the root of the trace this project logs event belongs to
      #   #   @option data [String] :span_id A unique identifier used to link different project logs events together as part
      #   #     of a full trace. See the
      #   #     [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full details
      #   #     on tracing
      #   #   @option data [Object, nil] :context Context is additional information about the code that produced the project logs
      #   #     event. It is essentially the textual counterpart to `metrics`. Use the
      #   #     `caller_*` attributes to track the location in code which produced the project
      #   #     logs event
      #   #   @option data [Object, nil] :error The error that occurred, if any.
      #   #   @option data [Object, nil] :expected The ground truth value (an arbitrary, JSON serializable object) that you'd
      #   #     compare to `output` to determine if your `output` value is correct or not.
      #   #     Braintrust currently does not compare `output` to `expected` for you, since
      #   #     there are so many different ways to do that correctly. Instead, these values are
      #   #     just used to help you navigate while digging into analyses. However, we may
      #   #     later use these values to re-score outputs or fine-tune your models.
      #   #   @option data [Object, nil] :input The arguments that uniquely define a user input (an arbitrary, JSON serializable
      #   #     object).
      #   #   @option data [Hash, nil] :metadata A dictionary with additional data about the test example, model outputs, or just
      #   #     about anything else that's relevant, that you can use to help find and analyze
      #   #     examples later. For example, you could log the `prompt`, example's `id`, or
      #   #     anything else that would be useful to slice/dice later. The values in `metadata`
      #   #     can be any JSON-serializable type, but its keys must be strings
      #   #   @option data [Object, nil] :metrics Metrics are numerical measurements tracking the execution of the code that
      #   #     produced the project logs event. Use "start" and "end" to track the time span
      #   #     over which the project logs event was produced
      #   #   @option data [Object, nil] :output The output of your application, including post-processing (an arbitrary, JSON
      #   #     serializable object), that allows you to determine whether the result is correct
      #   #     or not. For example, in an app that generates SQL queries, the `output` should
      #   #     be the _result_ of the SQL query generated by the model, not the query itself,
      #   #     because there may be multiple valid queries that answer a single question.
      #   #   @option data [Hash, nil] :scores A dictionary of numeric values (between 0 and 1) to log. The scores should give
      #   #     you a variety of signals that help you determine how accurate the outputs are
      #   #     compared to what you expect and diagnose failures. For example, a summarization
      #   #     app might have one score that tells you how accurate the summary is, and another
      #   #     that measures the word similarity between the generated and grouth truth
      #   #     summary. The word similarity score could help you determine whether the
      #   #     summarization was covering similar concepts or not. You can use these scores to
      #   #     help you sort, filter, and compare logs.
      #   #   @option data [Object, nil] :span_attributes Human-identifying attributes of the span, such as name, type, etc.
      #   #   @option data [Array<String>, nil] :span_parents An array of the parent `span_ids` of this project logs event. This should be
      #   #     empty for the root span of a trace, and should most often contain just one
      #   #     parent element for subspans
      #   #   @option data [Array<String>, nil] :tags A list of tags to log
      #   def initialize(data = {}) = super
    end
  end
end
